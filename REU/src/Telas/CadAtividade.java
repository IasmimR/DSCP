/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import dtoAtividades.Atividade;
import dtoAtividades.Formula;
import dtoDocentes.Usuario;
import static java.awt.image.ImageObserver.WIDTH;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import persist.PersistenciaDao;
import persist.dao.AtividadeDao;
import persist.dao.FormulaDao;
import persist.dao.UsuarioDao;

/**
 *
 * @author alunoinf
 */
public class CadAtividade extends javax.swing.JFrame {

    /**
     * Creates new form CadArea
     */
    public CadAtividade() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelAreaCadastrar = new javax.swing.JLabel();
        jComboBoxAreaMae = new javax.swing.JComboBox();
        jButtonAreaCadastrar = new javax.swing.JButton();
        jButtonAreaExcluir = new javax.swing.JButton();
        jButtonAreaAlterar = new javax.swing.JButton();
        jScrollPaneTabela = new javax.swing.JScrollPane();
        jTableArea = new javax.swing.JTable();
        jLabelAreaDescricao = new javax.swing.JLabel();
        jScrollPaneDescricao = new javax.swing.JScrollPane();
        jTextAreaDescriao = new javax.swing.JTextArea();
        jLabelAreaMae = new javax.swing.JLabel();
        jLabelAreaCod = new javax.swing.JLabel();
        jTextFieldAreaCod = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextAreaPontos = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabelAreaCadastrar.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelAreaCadastrar.setText("Cadastrar Área / Atividade");

        jComboBoxAreaMae.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jComboBoxAreaMaeAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jComboBoxAreaMae.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAreaMaeActionPerformed(evt);
            }
        });

        jButtonAreaCadastrar.setText("Cadastrar");
        jButtonAreaCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAreaCadastrarActionPerformed(evt);
            }
        });

        jButtonAreaExcluir.setText("Excluir");
        jButtonAreaExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAreaExcluirActionPerformed(evt);
            }
        });

        jButtonAreaAlterar.setText("Alterar");
        jButtonAreaAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAreaAlterarActionPerformed(evt);
            }
        });

        jTableArea.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Área", "Cod. Área", "Descrição", "Cod. Mãe", "Pontos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableArea.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTableAreaAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTableArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAreaMouseClicked(evt);
            }
        });
        jScrollPaneTabela.setViewportView(jTableArea);

        jLabelAreaDescricao.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelAreaDescricao.setText("Descrição:");

        jTextAreaDescriao.setColumns(20);
        jTextAreaDescriao.setRows(5);
        jScrollPaneDescricao.setViewportView(jTextAreaDescriao);

        jLabelAreaMae.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelAreaMae.setText("Área Mãe:");

        jLabelAreaCod.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelAreaCod.setText("Cod.:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Pontos:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneTabela)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabelAreaCod)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldAreaCod, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabelAreaMae)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jComboBoxAreaMae, javax.swing.GroupLayout.PREFERRED_SIZE, 644, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabelAreaDescricao)
                                        .addComponent(jLabel1))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextAreaPontos, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPaneDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButtonAreaExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButtonAreaCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButtonAreaAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 6, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(256, 256, 256)
                .addComponent(jLabelAreaCadastrar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabelAreaCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAreaCod)
                    .addComponent(jTextFieldAreaCod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelAreaDescricao)
                            .addComponent(jScrollPaneDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextAreaPontos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAreaCadastrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAreaExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAreaAlterar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxAreaMae, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAreaMae))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPaneTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAreaAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAreaAlterarActionPerformed
        try {
            PersistenciaDao persistenciaDao = new PersistenciaDao();
            Map<String, Object> params = new HashMap<String, Object>();

            StringBuilder hql = new StringBuilder("");

            List<Atividade> atividades = persistenciaDao.listarFiltroHql(Atividade.class, params, null, null, hql);

            /////////////////////////////////////// CAPTURA VALORES DAS CELULAS DA jTable CLIENTE /////////////////////////////////

            int linha_selecionada = jTableArea.getSelectedRow();

            String id;
            
            id =  jTextFieldAreaCod.getText();
           
            //Object teste = (Object) jTable3.getValueAt(linha_selecionada, 0);
            
            

            for (Atividade atividade : atividades) {
                if (atividade.getCodigo().equals(id)) {
                    String cod = jTextFieldAreaCod.getText();
                    String descricao = jTextAreaDescriao.getText();
                    double pontos = Double.parseDouble(jTextAreaPontos.getText());
                    String codMae = (String)(jComboBoxAreaMae.getSelectedItem().toString());
                   



                    //////////////////////////////////////// CELULAS ///////////////////////////////////////////////////////////////////////


                    ////////// EDITA codigo

                    if (!(atividade.getCodigo().equals(cod))) {
                        atividade.setCodigo(cod);
                        AtividadeDao atividadeDao = new AtividadeDao();
                        try {
                            atividadeDao.recebeDto(atividade);
                        } catch (Exception ex) {
                            Logger.getLogger(CadAtividade.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(rootPane, "Problema ao alterar o registro", "Erro", WIDTH);
                        }
                    }
                    
                    ////////// EDITA descrição

                    if (!(atividade.getDescricao().equals(descricao))) {
                        atividade.setDescricao(descricao);
                        AtividadeDao atividadeDao = new AtividadeDao();
                        try {
                            atividadeDao.recebeDto(atividade);
                        } catch (Exception ex) {
                            Logger.getLogger(CadAtividade.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(rootPane, "Problema ao alterar o registro", "Erro", WIDTH);
                        }
                    }
                    
                    ////////// EDITA pontos

                    if (!(atividade.getPontos().equals(pontos))) {
                        atividade.setPontos(pontos);
                        AtividadeDao atividadeDao = new AtividadeDao();
                        try {
                            atividadeDao.recebeDto(atividade);
                        } catch (Exception ex) {
                            Logger.getLogger(CadAtividade.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(rootPane, "Problema ao alterar o registro", "Erro", WIDTH);
                        }
                    }

                    ////////// EDITA codMãe

                    if (!(atividade.getCodigoMae().equals(codMae))) {
                        atividade.setCodigoMae(codMae);
                        AtividadeDao atividadeDao = new AtividadeDao();
                        try {
                            atividadeDao.recebeDto(atividade);
                        } catch (Exception ex) {
                            Logger.getLogger(CadAtividade.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(rootPane, "Problema ao alterar o registro", "Erro", WIDTH);
                        }
                    }

                    JOptionPane.showMessageDialog(null, "Registro alterado com sucesso!");

                }
            }
            
            } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Registro alterado com sucesso!");
        }
        
        //Atualizar tabela 
         
          try {
            PersistenciaDao persistenciaDao = new PersistenciaDao();
            Map<String, Object> params = new HashMap<String, Object>();
            
            StringBuilder hql = new StringBuilder("");
            
            
            List<Atividade> atividades = persistenciaDao.listarFiltroHql(Atividade.class, params, null, null, hql);
            
            DefaultTableModel adm = (DefaultTableModel) jTableArea.getModel();
            adm.setNumRows(0);
            
            for (Atividade atividade : atividades) {
                     adm.addRow(new Object[]{
                        atividade.getIdAtividade(),
                        atividade.getCodigo(),
                        atividade.getDescricao(),
                        atividade.getCodigoMae(),
                        atividade.getPontos()
                            
                        });
            }
        } catch (Exception e) {
            
        }
       
    }//GEN-LAST:event_jButtonAreaAlterarActionPerformed

    private void jButtonAreaCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAreaCadastrarActionPerformed
        // TODO add your handling code here:
        
        
        Atividade atividade = new Atividade();
        
        String valor = (String)(jComboBoxAreaMae.getSelectedItem().toString());
        
        atividade.setCodigo(jTextFieldAreaCod.getText());
        atividade.setDescricao(jTextAreaDescriao.getText());
        atividade.setPontos(Double.parseDouble(jTextAreaPontos.getText()));
        atividade.setCodigoMae(valor);
        

        AtividadeDao AtividadeDao = new AtividadeDao();
        try {
            AtividadeDao.recebeDto(atividade);
        } catch (Exception ex) {
        //    Logger.getLogger(TipoCreditoTela.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Problema ao inserir a área", "Erro" + ex.getMessage(), WIDTH);
        }
        
        JOptionPane.showMessageDialog(rootPane, "Área inserida com sucesso!", "Sucesso", WIDTH);
        jTextFieldAreaCod.setText("");
        jTextAreaDescriao.setText("");
        jTextAreaPontos.setText("");
        jComboBoxAreaMae.setSelectedItem("");
        
        // Atualizar tabela
        
        try {
            PersistenciaDao persistenciaDao = new PersistenciaDao();
            Map<String, Object> params = new HashMap<String, Object>();
            
            StringBuilder hql = new StringBuilder("");
            
            
            List<Atividade> atividades = persistenciaDao.listarFiltroHql(Atividade.class, params, null, null, hql);
            
            DefaultTableModel adm = (DefaultTableModel) jTableArea.getModel();
            adm.setNumRows(0);
            
            for (Atividade atividadee : atividades) {
                     adm.addRow(new Object[]{
                        atividadee.getIdAtividade(),
                        atividadee.getCodigo(),
                        atividadee.getDescricao(),
                        atividadee.getCodigoMae(),
                        atividadee.getPontos()
                            
                        });
            }
        } catch (Exception e) {
            
        }
        
        //Atualiza dados da jcombobox
        
        jComboBoxAreaMae.removeAllItems();
        jComboBoxAreaMae.setSelectedItem("");
        
        try {
            PersistenciaDao persistenciaDao = new PersistenciaDao();
            Map<String, Object> params = new HashMap<String, Object>();
            
            StringBuilder hql = new StringBuilder("");
            
            List<Atividade> atividades = persistenciaDao.listarFiltroHql(Atividade.class, params, null, null, hql);
            
            jComboBoxAreaMae.addItem("");
            
            for (Atividade atividadeea : atividades) {
                     
                jComboBoxAreaMae.addItem(atividadeea.getCodigo() + " - " + atividadeea.getDescricao());
            }
            
        } catch (Exception e) {
            
        }
    }//GEN-LAST:event_jButtonAreaCadastrarActionPerformed

    private void jComboBoxAreaMaeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAreaMaeActionPerformed
        
    }//GEN-LAST:event_jComboBoxAreaMaeActionPerformed

    private void jComboBoxAreaMaeAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jComboBoxAreaMaeAncestorAdded
         // TODO add your handling code here:
    //jComboBoxAreaMae.removeAllItems();
        jComboBoxAreaMae.setSelectedItem("");
        
        try {
            PersistenciaDao persistenciaDao = new PersistenciaDao();
            Map<String, Object> params = new HashMap<String, Object>();
            
            StringBuilder hql = new StringBuilder("");
            
            
            List<Atividade> atividades = persistenciaDao.listarFiltroHql(Atividade.class, params, null, null, hql);
            
            jComboBoxAreaMae.addItem("");
            
            for (Atividade atividade : atividades) {
                     
                jComboBoxAreaMae.addItem(atividade.getCodigo() + " - " + atividade.getDescricao());
            }
            
        } catch (Exception e) {
            
        }
        
        
            
    }//GEN-LAST:event_jComboBoxAreaMaeAncestorAdded

    private void jTableAreaAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTableAreaAncestorAdded
        try {
            PersistenciaDao persistenciaDao = new PersistenciaDao();
            Map<String, Object> params = new HashMap<String, Object>();
            
            StringBuilder hql = new StringBuilder("");
            
            
            List<Atividade> atividades = persistenciaDao.listarFiltroHql(Atividade.class, params, null, null, hql);
            
            DefaultTableModel adm = (DefaultTableModel) jTableArea.getModel();
            adm.setNumRows(0);
            
            for (Atividade atividade : atividades) {
                     adm.addRow(new Object[]{
                        atividade.getIdAtividade(),
                        atividade.getCodigo(),
                        atividade.getDescricao(),
                        atividade.getCodigoMae(),
                        atividade.getPontos()
                            
                        });
            }
        } catch (Exception e) {
            
        }
    }//GEN-LAST:event_jTableAreaAncestorAdded

    private void jButtonAreaExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAreaExcluirActionPerformed
         try {
            PersistenciaDao persistenciaDao = new PersistenciaDao();
            Map<String, Object> params = new HashMap<String, Object>();

            StringBuilder hql = new StringBuilder("");

            List<Atividade> atividades = persistenciaDao.listarFiltroHql(Atividade.class, params, null, null, hql);

            //  DefaultTableModel adm = (DefaultTableModel) jTable1.getModel();
            //  adm.setNumRows(0);

            int linha_selecionada = jTableArea.getSelectedRow();

            //Object cod = (Object) jTable3.getValueAt(linha_selecionada, 0);
            String id;
            id =  (jTextFieldAreaCod.getText());
            

            for (Atividade atividade : atividades) {
                if (atividade.getCodigo().equals(id)) {
                    AtividadeDao.excluir(atividade);

                }
            
                jTextFieldAreaCod.setText("");
                jTextAreaDescriao.setText("");
                jTextAreaPontos.setText("");
                jComboBoxAreaMae.setSelectedItem("");
                
                
            }

            JOptionPane.showMessageDialog(null, "Area excluida com sucesso!");
        } catch (Exception e) {
            
        }
         
         //Atualizar tabela 
         
          try {
            PersistenciaDao persistenciaDao = new PersistenciaDao();
            Map<String, Object> params = new HashMap<String, Object>();
            
            StringBuilder hql = new StringBuilder("");
            
            
            List<Atividade> atividades = persistenciaDao.listarFiltroHql(Atividade.class, params, null, null, hql);
            
            DefaultTableModel adm = (DefaultTableModel) jTableArea.getModel();
            adm.setNumRows(0);
            
            for (Atividade atividade : atividades) {
                     adm.addRow(new Object[]{
                        atividade.getIdAtividade(),
                        atividade.getCodigo(),
                        atividade.getDescricao(),
                        atividade.getCodigoMae(),
                        atividade.getPontos()
                            
                        });
            }
        } catch (Exception e) {
            
        }
          
          //Atualiza jcombobox
          
         jComboBoxAreaMae.removeAllItems();
        jComboBoxAreaMae.setSelectedItem("");
        
        try {
            PersistenciaDao persistenciaDao = new PersistenciaDao();
            Map<String, Object> params = new HashMap<String, Object>();
            
            StringBuilder hql = new StringBuilder("");
            
            List<Atividade> atividades = persistenciaDao.listarFiltroHql(Atividade.class, params, null, null, hql);
            
            jComboBoxAreaMae.addItem("");
            
            for (Atividade atividadeea : atividades) {
                     
                jComboBoxAreaMae.addItem(atividadeea.getCodigo() + " - " + atividadeea.getDescricao());
            }
            
        } catch (Exception e) {
            
        }
    }//GEN-LAST:event_jButtonAreaExcluirActionPerformed

    private void jTableAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAreaMouseClicked
        jComboBoxAreaMae.setSelectedItem("");
        try {
            PersistenciaDao persistenciaDao = new PersistenciaDao();
            Map<String, Object> params = new HashMap<String, Object>();
            
            StringBuilder hql = new StringBuilder("");
            
            
            List<Atividade> atividades = persistenciaDao.listarFiltroHql(Atividade.class, params, null, null, hql);
            
          //  DefaultTableModel adm = (DefaultTableModel) jTable3.getModel();
           // adm.setNumRows(0);
            
            for (Atividade atividade : atividades) {
               int linha_selecionada = jTableArea.getSelectedRow();
  
        ///////// Pegar dados da Jtable
        jTextFieldAreaCod.setText(jTableArea.getValueAt(linha_selecionada, 1).toString());
        jTextAreaDescriao.setText(jTableArea.getValueAt(linha_selecionada, 2).toString());
        jTextAreaPontos.setText(jTableArea.getValueAt(linha_selecionada, 4).toString());
        jComboBoxAreaMae.setSelectedItem(jTableArea.getValueAt(linha_selecionada, 3).toString());
     
  
        Object id;
        id =  jTableArea.getValueAt(linha_selecionada, 0);
        String resultado= id.toString(); 
         
     
       ///////// Joga os dados da linha selecionada para os Jfield
       if(     atividade.getCodigo().equals(resultado)){
            jTextFieldAreaCod.setText("");
            jTextAreaDescriao.setText("");
            jTextAreaPontos.setText("");
            jComboBoxAreaMae.setSelectedItem("");
            
       
       
            double pontos = atividade.getPontos();
        
       jTextFieldAreaCod.setText(atividade.getCodigo());
       jTextAreaDescriao.setText(atividade.getDescricao());
       jTextAreaPontos.setText(String.valueOf(pontos));
       jComboBoxAreaMae.addItem(atividade.getCodigoMae());

        }
       
            }
     }catch (Exception e) {
           
        }
    }//GEN-LAST:event_jTableAreaMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadAtividade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadAtividade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadAtividade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadAtividade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadAtividade().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAreaAlterar;
    private javax.swing.JButton jButtonAreaCadastrar;
    private javax.swing.JButton jButtonAreaExcluir;
    private javax.swing.JComboBox jComboBoxAreaMae;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelAreaCadastrar;
    private javax.swing.JLabel jLabelAreaCod;
    private javax.swing.JLabel jLabelAreaDescricao;
    private javax.swing.JLabel jLabelAreaMae;
    private javax.swing.JScrollPane jScrollPaneDescricao;
    private javax.swing.JScrollPane jScrollPaneTabela;
    private javax.swing.JTable jTableArea;
    private javax.swing.JTextArea jTextAreaDescriao;
    private javax.swing.JTextField jTextAreaPontos;
    private javax.swing.JTextField jTextFieldAreaCod;
    // End of variables declaration//GEN-END:variables
}
